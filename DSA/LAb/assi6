#include <iostream>

struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

// Function to insert a node at the specified position
Node* insert(Node* node, int value, char direction) {
    if (node == nullptr) {
        return new Node(value);
    }

    if (direction == 'L' || direction == 'l') {
        node->left = insert(node->left, value, direction); // Insert in the left subtree
    } else if (direction == 'R' || direction == 'r') {
        node->right = insert(node->right, value, direction); // Insert in the right subtree
    } else {
        std::cout << "Invalid direction! Use 'L' for left or 'R' for right." << std::endl;
    }
    
    return node;
}

void preorder(Node* node) {
    if (node == nullptr) return;
    std::cout << node->data << " ";
    preorder(node->left);
    preorder(node->right);
}

void inorder(Node* node) {
    if (node == nullptr) return;
    inorder(node->left);
    std::cout << node->data << " ";
    inorder(node->right);
}

void postorder(Node* node) {
    if (node == nullptr) return;
    postorder(node->left);
    postorder(node->right);
    std::cout << node->data << " ";
}

int main() {
    Node* root = nullptr;
    int n, value;
    char direction;

    std::cout << "Enter the number of nodes to insert in the binary tree: ";
    std::cin >> n;

    for (int i = 0; i < n; i++) {
        std::cout << "Enter value for node " << i + 1 << ": ";
        std::cin >> value;
        std::cout << "Enter direction (L for left, R for right): ";
        std::cin >> direction;
        root = insert(root, value, direction);
    }

    std::cout << "Preorder Traversal: ";
    preorder(root);
    std::cout << std::endl;

    std::cout << "Inorder Traversal: ";
    inorder(root);
    std::cout << std::endl;

    std::cout << "Postorder Traversal: ";
    postorder(root);
    std::cout << std::endl;

    return 0;
}
